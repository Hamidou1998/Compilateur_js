// fichier Compilateur.jj
PARSER_BEGIN(Compilateur)
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
public class Compilateur {
    public static void main(String args[]) {
    
   try {
    Compilateur parseur;
    if(args.length == 0)
        {
            System.out.println("Compilateur :  Lecture du fichier systeme . . .");
            parseur=new Compilateur(System.in);
            parseur.mainNT();
            System.out.println("C'est bien une expression arithmetique");
        }
    else
        if(args.length == 1)
        {
            System.out.println("Compilateur :Lecture du fichier " +args[0]+" .....");
            parseur=new Compilateur(new FileInputStream(args[0]), "UTF-8");
            parseur.mainNT();
            System.out.println("C'est bien une expression arithmetique");

        }
    } 
        catch (TokenMgrError e) 
         { 
             System.out.println("Ceci n'est pas une expression arithmetique");
         }
         catch (ParseException e) 
         {
            System.out.println("Ceci n'est pas une expression arithmetique");
         }
        catch(java.io.FileNotFoundException e)
        {
           System.out.println("Fichier n'est pas correct !!"); 
        }
    }
} 
    PARSER_END(Compilateur)
    
    /**************** GRAMMAIRE *****************//* 

     TOKEN:
     {
        < SOURCE_CHAR: ["\u0000"-"\uFFFE"] >
    }
     MORE :
    {
      < INPUT_ELEMENT_DIV:
            <WHITE_SPACE>
            | <LINE_TERMINATOR>
            | <COMMENT>
            | <_TOKEN>
            | <DIV_PUNCTUATOR>
        >
        }

        MORE:
        {
        < INPUTELEMENTREGEXP:
            <ESPACE>
            | <LINE_TERMINATOR>
            | <COMMENT>
            | <_TOKEN>
            | <REGULAR_EXPRESSION_LITERAL>
        >
        }
        */

        /* Space */

        <DEFAULT, IN_REGEX>
        SPECIAL_TOKEN :
        {
            <ESPACE: <TAB> | <VT> | <FF> | <SP> | <NBSP> >
            |< #TAB: "\u0009" | "\t" > /* Tabulation */
            |< #VT: "\u000B" > /* Vertical Tab */
            |< #FF: "\u000C" | "\f"> /* Form Feed */
            |< #SP: "\u0020" | " " > /* Space */
            |< #NBSP: "\u00A0" > /* No-Break space */
            |< #USP: /* Other Unicode space seperator */
                ["\u2000"] 
                | ["\u2001"] 
                | ["\u2002"] 
                | ["\u2003"] 
                | ["\u2004"] 
                | ["\u2005"] 
                | ["\u2006"] 
                | ["\u2007"]
                | ["\u2008"] 
                | ["\u2009"] 
                | ["\u200A"] 
                | ["\u200B"]
                | ["\u3000"]
            >
        }

        /* Commentaire */

        <DEFAULT, IN_REGEX>
        MORE :
        {
            "//" : IN_UNI_LIGNE_COMMENTAIRE
        |
            "/*" : IN_MULTI_LIGNE_COMMENTAIRE
        }

        <IN_UNI_LIGNE_COMMENTAIRE>
        SPECIAL_TOKEN :
        {
            <UNI_LIGNE_COMMENTAIRE: (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
        }

        <IN_MULTI_LIGNE_COMMENTAIRE>
        SPECIAL_TOKEN :
        {
            <MULTI_LIGNE_COMMENTAIRE: "*/" > : DEFAULT
        }

        <IN_UNI_LIGNE_COMMENTAIRE,IN_MULTI_LIGNE_COMMENTAIRE, IN_PATTERN>
        MORE :
        {
            < ~[] >
        }
}
    SKIP :
    { " " | "\t" }
    TOKEN :
    { 
        < NOMBRE: (["1"-"9"])+["."](["0"-"9"])* >
    | < EOL: ";" >
    }
    void mainNT () :
    {}
    { expression() <EOL> }
    void expression () :
    {}
    { terme() (
    "+" terme()
    | "-" terme()
    )*
    }
    void terme () :
    {}
    { 
        facteur() (
        "*" facteur()
        | "/" facteur()
    )*
    }
    void facteur () :
    {}
    { 
        "(" expression() ")"
        | "-" facteur()
         | <NOMBRE>
    }